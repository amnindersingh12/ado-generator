<%# app/views/dashboard/_attendance_trend_chart_single.html.erb %>
<div class="card shadow mb-4">
  <div class="card-header py-3 bg-card-bg border-bottom-border">
    <h6 class="m-0 font-weight-bold text-primary">
      <i class="bi bi-graph-up me-2 text-info"></i> <%= title %>
    </h6>
  </div>
  <div class="card-body bg-card-bg">
    <div class="chart-container">
      <canvas id="<%= chart_id %>"></canvas>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var ctx = document.getElementById('<%= chart_id %>').getContext('2d');

    // Dynamically fetch CSS variable values
    const getCssVar = (name) => getComputedStyle(document.documentElement).getPropertyValue(name).trim();

    // Chart.js specific color variables
    const bodyTextColor = getCssVar('--color-body-text');
    const secondaryColor = getCssVar('--color-secondary');
    const cardBorderColor = getCssVar('--color-card-border');

    // Get the border color directly as it's already a CSS variable string
    const datasetBorderColor = '<%= border_color %>';

    // Helper to generate rgba for fill colors if the base color is a CSS var
    const getRgbaFromCssVar = (cssVarString, alpha) => {
      // Extract the CSS variable name from the string, e.g., 'var(--color-primary)' -> '--color-primary'
      const varName = cssVarString.replace(/^var\((--color-[a-z-]+)\)$/, '$1');
      const hexColor = getCssVar(varName);

      if (!hexColor || hexColor.length < 7) {
         console.warn(`CSS variable ${varName} not found or invalid hex. Using default fallback for RGBA.`);
         return `rgba(0, 0, 0, ${alpha})`; // Default black with alpha
      }
      // Convert hex to rgb
      const r = parseInt(hexColor.slice(1, 3), 16);
      const g = parseInt(hexColor.slice(3, 5), 16);
      const b = parseInt(hexColor.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    };

    var myChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: <%= raw labels.to_json %>,
        datasets: [{
          label: '<%= dataset_label %>',
          data: <%= raw data.to_json %>,
          borderColor: datasetBorderColor,
          backgroundColor: getRgbaFromCssVar(datasetBorderColor, 0.1), // Light fill
          fill: true, // Enable fill below the line
          pointBackgroundColor: datasetBorderColor,
          pointHoverBackgroundColor: datasetBorderColor, // Often same as pointBackgroundColor for consistency
          pointRadius: 5,
          pointHoverRadius: 7,
          pointHitRadius: 50,
          pointBorderWidth: 2,
          tension: 0.3 // Smoother lines
        }]
      },
      options: {
        maintainAspectRatio: false, // Prevents chart from distorting
        layout: { padding: { left: 10, right: 25, top: 25, bottom: 0 } }, // Consistent padding
        scales: {
          x: {
            title: {
              display: true,
              text: 'Time (Hour)',
              color: secondaryColor, // Title color from theme
            },
            grid: {
              display: false, // Hide vertical grid lines
              drawBorder: false,
            },
            ticks: {
              maxTicksLimit: 7, // Limit ticks for readability
              color: bodyTextColor, // X-axis labels use theme text color
            },
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Count',
              color: secondaryColor, // Title color from theme
            },
            ticks: {
              maxTicksLimit: 5, // Limit ticks for readability
              padding: 10,
              color: bodyTextColor, // Y-axis labels use theme text color
              callback: function(value) { return '' + value; }
            },
            grid: {
              color: cardBorderColor, // Grid lines use theme border color
              zeroLineColor: cardBorderColor,
              drawBorder: false,
              borderDash: [2],
              zeroLineBorderDash: [2],
            },
          }
        },
        plugins: {
          legend: {
            display: <%= controls.nil? ? true : controls %>, // Use the 'controls' prop for legend display
            labels: {
              color: bodyTextColor, // Legend text uses theme text color
            },
          },
          tooltip: {
            backgroundColor: getCssVar('--color-card-bg'), // Tooltip background from theme
            bodyColor: bodyTextColor, // Tooltip body text from theme
            titleColor: secondaryColor, // Tooltip title from theme
            borderColor: cardBorderColor, // Tooltip border from theme
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: true,
            intersect: false,
            mode: 'index',
            caretPadding: 10,
          }
        }
      }
    });
  });
</script>