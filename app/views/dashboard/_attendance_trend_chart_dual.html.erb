<%# app/views/dashboard/_attendance_trend_chart_dual.html.erb %>
<div class="card shadow mb-4">
  <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between bg-card-bg border-bottom-border">
    <h6 class="m-0 font-weight-bold text-primary">
      <i class="bi bi-graph-line me-2 text-accent"></i> <%= title %>
    </h6>
    <% if controls %>
      <div class="dropdown no-arrow">
        <a class="dropdown-toggle text-secondary" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <i class="bi bi-three-dots-vertical fa-sm fa-fw"></i>
        </a>
        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
          <div class="dropdown-header text-muted">More Actions:</div>
          <a class="dropdown-item" href="#">View Details</a>
          <a class="dropdown-item" href="#">Export Data</a>
        </div>
      </div>
    <% end %>
  </div>
  <div class="card-body bg-card-bg">
    <div class="chart-area">
      <canvas id="<%= chart_id %>"></canvas>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var ctx = document.getElementById('<%= chart_id %>').getContext('2d');

    // Helper to dynamically fetch CSS variable values
    // It returns the trimmed value, or an empty string if not found.
    const getCssVar = (name) => {
      const value = getComputedStyle(document.documentElement).getPropertyValue(name).trim();
      return value || ''; // Ensure it returns an empty string if value is falsy
    };

    // Chart.js specific color variables fetched from CSS
    const bodyTextColor = getCssVar('--color-body-text');
    const secondaryColor = getCssVar('--color-secondary');
    const cardBorderColor = getCssVar('--color-card-border');
    const cardBgColor = getCssVar('--color-card-bg');

    // These props MUST be the exact CSS variable NAMES (e.g., '--color-primary')
    // not actual hex values (e.g., '#007bff').
    const datasetInColorVarName = '<%= border_color_in %>';
    const datasetOutColorVarName = '<%= border_color_out %>';

    // Helper to convert a hex color string (like "#RRGGBB") to RGBA
    const hexToRgba = (hex, alpha) => {
      // Basic validation: must start with # and have at least 7 characters
      if (!hex || hex.length < 7 || hex.indexOf('#') !== 0) {
        console.warn(`Invalid hex color received for RGBA conversion: "${hex}". Using default fallback.`);
        return `rgba(0, 0, 0, ${alpha})`; // Fallback to black with specified alpha
      }
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    };

    // First, fetch the actual hex color values from the CSS variables
    const datasetInBorderColorHex = getCssVar(datasetInColorVarName);
    const datasetOutBorderColorHex = getCssVar(datasetOutColorVarName);

    var myLineChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: <%= raw labels.to_json %>,
        datasets: [
          {
            label: '<%= dataset_in_label %>',
            data: <%= raw in_data.to_json %>,
            borderColor: datasetInBorderColorHex, // Use the fetched hex color
            backgroundColor: hexToRgba(datasetInBorderColorHex, 0.1), // Convert fetched hex to RGBA
            fill: true,
            pointBackgroundColor: datasetInBorderColorHex,
            pointHoverBackgroundColor: datasetInBorderColorHex,
            pointRadius: 5,
            pointHoverRadius: 7,
            pointHitRadius: 50,
            pointBorderWidth: 2,
            tension: 0.3,
          },
          {
            label: '<%= dataset_out_label %>',
            data: <%= raw out_data.to_json %>,
            borderColor: datasetOutBorderColorHex, // Use the fetched hex color
            backgroundColor: hexToRgba(datasetOutBorderColorHex, 0.1), // Convert fetched hex to RGBA
            fill: true,
            pointBackgroundColor: datasetOutBorderColorHex,
            pointHoverBackgroundColor: datasetOutBorderColorHex,
            pointRadius: 5,
            pointHoverRadius: 7,
            pointHitRadius: 50,
            pointBorderWidth: 2,
            tension: 0.3,
          },
        ],
      },
      options: {
        maintainAspectRatio: false,
        layout: { padding: { left: 10, right: 25, top: 25, bottom: 0 } },
        scales: {
          x: {
            grid: {
              display: false,
              drawBorder: false,
            },
            ticks: {
              maxTicksLimit: 7,
              color: bodyTextColor,
            },
          },
          y: {
            beginAtZero: true,
            ticks: {
              maxTicksLimit: 5,
              padding: 10,
              color: bodyTextColor,
              callback: function(value) { return '' + value; }
            },
            grid: {
              color: cardBorderColor,
              zeroLineColor: cardBorderColor,
              drawBorder: false,
              borderDash: [2],
              zeroLineBorderDash: [2],
            },
          },
        },
        plugins: {
          legend: {
            display: <%= controls.nil? ? true : controls %>,
            position: 'bottom',
            labels: {
              color: bodyTextColor,
            },
          },
          tooltip: {
            backgroundColor: cardBgColor,
            bodyColor: bodyTextColor,
            titleColor: secondaryColor,
            borderColor: cardBorderColor,
            borderWidth: 1,
            xPadding: 15,
            yPadding: 15,
            displayColors: true,
            intersect: false,
            mode: 'index',
            caretPadding: 10,
          }
        },
      }
    });
  });
</script>