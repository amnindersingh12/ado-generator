<!-- Webcam Capture Partial -->
<div id="webcam-capture-wrapper-<%= field %>">
  <!-- Webcam preview -->
  <video id="video-<%= field %>" autoplay class="mb-3" style="max-width: 200px; max-height: 200px;"></video>

  <!-- Canvas for frame capture -->
  <canvas id="canvas-<%= field %>" style="display: none;"></canvas>

  <!-- File field -->
  <%# form.label field, "Capture Photo", class: "form-label" %>
  <%= form.file_field field, id: field, class: 'form-control', style: 'display: none;' %>

  <!-- Action buttons -->
  <button type="button" id="takePhotoBtn-<%= field %>" class="btn btn-secondary mt-2">
    📸 Take Photo
  </button>
  <button type="button" id="retakePhotoBtn-<%= field %>" class="btn btn-warning mt-2" style="display: none;">
    🔄 Retake Photo
  </button>

  <!-- Captured image preview -->
  <img id="photoPreview-<%= field %>" alt="Captured photo" class="img-thumbnail mt-3" style="max-width: 200px; max-height: 200px; display: none;" />

  <!-- Warning message -->
  <div id="photoWarning-<%= field %>" class="text-danger small mt-2">
    ⚠️ Please take a photo to enable form submission.
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const field = "<%= field %>";
    const video = document.getElementById(`video-${field}`);
    const canvas = document.getElementById(`canvas-${field}`);
    const preview = document.getElementById(`photoPreview-${field}`);
    const fileInput = document.getElementById(field);
    const takeBtn = document.getElementById(`takePhotoBtn-${field}`);
    const retakeBtn = document.getElementById(`retakePhotoBtn-${field}`);
    const warning = document.getElementById(`photoWarning-${field}`);
    const form = fileInput.closest("form");
    const submitBtn = form.querySelector("input[type=submit], button[type=submit]");

    // Start camera once
    if (!window[`webcamStarted-${field}`]) {
      navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {
        video.srcObject = stream;
      }).catch(err => {
        console.error("Camera error:", err);
        warning.innerText = "❌ Cannot access webcam. Please allow camera access.";
      });
      window[`webcamStarted-${field}`] = true;
    }

    // Capture photo
    takeBtn.addEventListener("click", () => {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext("2d").drawImage(video, 0, 0);
      const dataURL = canvas.toDataURL("image/jpeg");

      // Preview
      preview.src = dataURL;
      preview.style.display = "block";
      video.style.display = "none";

      // Set blob to file input
      canvas.toBlob(blob => {
        const file = new File([blob], "photo.jpg", { type: "image/jpeg" });
        const dt = new DataTransfer();
        dt.items.add(file);
        fileInput.files = dt.files;

        // Enable submit
        submitBtn.disabled = false;
        warning.style.display = "none";
      });

      takeBtn.style.display = "none";
      retakeBtn.style.display = "inline-block";
    });

    // Retake photo
    retakeBtn.addEventListener("click", () => {
      preview.style.display = "none";
      video.style.display = "block";
      takeBtn.style.display = "inline-block";
      retakeBtn.style.display = "none";

      // Reset input and disable submit
      fileInput.value = "";
      submitBtn.disabled = true;
      warning.style.display = "block";
    });

    // Initial disable
    submitBtn.disabled = true;

    // Last defense before submit
    form.addEventListener("submit", e => {
      if (!fileInput.files.length) {
        e.preventDefault();
        alert("🚫 You must take a photo before submitting.");
      }
    });
  });
</script>
